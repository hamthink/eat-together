<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Member">
	<!--by 지은, 사이트 회원가입 sql문 수정_20200708 -->
	<insert id="signUp">
		insert into member
		values(#{mdto.id},#{mdto.pw},#{mdto.nickname},#{mdto.birth},#{mdto.account_email},0,
		default ,#{mfdto.sysname},#{mdto.gender}, default)
	</insert>

	<!-- by 지은, 파일업로드를 위해서 db에는 profile컬럼을 생성하였으나 dto에는 임의로 sysname이라는 맴버필드를 
		생성하여 프로필파일 경로를 가져옴 -->
	<!-- 따라서 db상의 profile컬럼 값을 dto의 sysname으로 String 형태로 가져오겠다는 의미이다_20200708 -->

	<resultMap id="MemberFile" type="coma.spring.dto.MemberDTO">
		<result property="sysname" column="profile" />
	</resultMap>

	<!--by 지은, 카카오톡 회원가입의 경우 입력값을 모두 default로 받아오프로 signUp mapper를 사이트 회원가입과 
		구분함_20200708 -->
	<insert id="signUpKakao">
		insert into member
		values(#{id},#{pw},#{nickname},#{birth},#{account_email},0, default,
		default, default, #{member_type})
	</insert>

	<select id="logIn" resultType="int">
		select count(*) from member where
		${targetColumn1}=#{targetValue1} and
		${targetColumn2}=#{targetValue2}
	</select>

	<select id="selectMyInfo" resultType="coma.spring.dto.MemberDTO"
		resultMap="MemberFile">
		select * from member where
		id=#{value}
	</select>
	<!-- 닉네임으로 내정보 가져오기 -->
	<select id="selectMyInfoByNick"
		resultType="coma.spring.dto.MemberDTO" resultMap="MemberFile">
		select * from member
		where nickname=#{value}
	</select>
	<select id="isEmailAvailable" resultType="int">
		select count(*) from
		member where account_email=#{value}
	</select>

	<select id="isIdAvailable" resultType="int">
		select count(*) from
		member where id=#{value}
	</select>

	<!-- 닉네임 중복체크_20200710 -->
	<select id="isNickAvailable" resultType="int">
		select count(*) from
		member where nickname=#{value}
	</select>

	<!--by지은, 회원가입 정보가 수정됨에 따라서 회원정보수정 sql문 수정_20200708 -->
	<update id="editMyInfo">
		update member set birth=#{mdto.birth},
		account_email=#{mdto.account_email}, profile=#{mfdto.sysname},
		gender=#{mdto.gender} where id=#{mdto.id}
	</update>

	<update id="editPw">
		update member set ${targetColumn1}=#{targetValue1}
		where ${targetColumn2}=#{targetValue2}
	</update>

	<select id="emailCheck"
		resultType="coma.spring.dto.MemberDTO">
		select * from member where id=#{targetValue1} and
		account_email=#{targetValue2}
	</select>

	<select id="emailCheckForId"
		resultType="coma.spring.dto.MemberDTO">
		select * from member where account_email=#{value}
	</select>
<!-- 회원탈퇴 시 테이블마다 데이터를 지우는 매퍼 생성_20200717 -->
	<delete id="deleteMember1">
		delete from member where
		nickname=#{value}
	</delete>
	<delete id="deleteMember2">
		delete from party where writer=#{value}
	</delete>
	<delete id="deleteMember3">
		delete from partylist where participant=#{value}
	</delete>
	<update id="renameReview">
		update review set id='unknown'
		where id =#{value}
	</update>
</mapper>